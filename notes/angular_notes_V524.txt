<Subject>
<Conventions>
    In this document as a convention all commands to input
        in the CLI starts with '#' e.g. #cd $HOME, #cd ~
        CLI command:
            #<command>
</Conventions>

<911 commands>
============
- 
</911 commands>


<Misc>
====
-
</Misc>

<Links Readings & Ref. Material>
================================
-HTML docs : 
	https://www.w3schools.com/html/html_forms_attributes.asp

-Angular Material
    https://material.angular.io/guide/theming
-Storage context
    https://firebase.google.com/docs/firestore/client/libraries
    
-Google search
    https://developers.google.com/search/docs/fundamentals/how-search-works#:~:text=Google%20Search%20is%20a%20fully,to%20add%20to%20our%20index.
</Links Readings & Ref. Material>

-Property Binding and (HTML Attribbutes vs DOM properties)
    https://jakearchibald.com/2024/attributes-vs-properties/





<Notes>
<install>
<Mac>
-Upgrade Node.js 
     brew upgrade node
    installs nvm (Node Version Manager)
    #curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    download and install Node.js (you may need to restart the terminal)
    #nvm install 20
    verifies the right Node.js version is in the environment
    #node -v # should print `v20.15.1`
    Verifies the right NPM version is in the environment
    #npm -v # should print `10.7.0`
    Latest installed on 7/10/2024
    >Ramons-MacBook-Pro:Angular ramon$ node -v
    v20.15.1
    >Ramons-MacBook-Pro:Angular ramon$ npm -v
    10.7.0

-Upgrade Python to 3.12 in MacBook
    Ramons-MacBook-Pro:Angular ramon$ which -a python3.12
    /usr/local/bin/python3.12
    Ramons-MacBook-Pro:Angular ramon$ ls -alF /usr/local/bin/python3.12
    lrwxr-xr-x  1 ramon  admin  43 Jul 10 18:45 /usr/local/bin/python3.12@ -> ../Cellar/python@3.12/3.12.4/bin/python3.12
    Ramons-MacBook-Pro:Angular ramon$ python3.12 --version
    Python 3.12.4
</Mac>
<Windows>
    https://nodejs.org/en
    LSV Latest stable version at July 10th 2024
        PS C:\Users\rcastillo\Documents\DocsMisc\src\Angular> node -v
        v20.15.1 
    PS C:\Users\rcastillo\Documents\DocsMisc\src\Angular> npm -v
        10.7.0
</Windows>
<TypeScript>
    TypeScript - TS
    install TS
        To create package.json
        #npm init
    #npm i typescript
    #npm install typescript -g (had to install as an admin/Power shell)
    #tsc --init
    Cleaner install in Mac
         #npm install typescript -g
         #tsc -v
            Ramons-MacBook-Pro:Angular ramon$ tsc -v
            Version 5.5.3
</TypeScript>
<Angular>
<Windows>
    Power Shell set 
        PS C:\Users\rcastillo> Get-ExecutionPolicy
        Restricted
        PS C:\Users\rcastillo> Get-ExecutionPolicy -Scope CurrentUser
        Undefined
        PS C:\Users\rcastillo> Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned
        PS C:\Users\rcastillo> Get-ExecutionPolicy -Scope CurrentUser
    npm install -g @angular/cli

</Windows>
<Mac>
    sudo npm install -g @angular/cli
</Mac>
*How to Create a new project
    position in the desired directory
    #ng new [projectname]
*How to manually add new components (simple one)
    under ./app
        create files:
            1) {name}.component.ts
                ex. => header.component.ts
                -import component from core  
                -add decorator and in the template or templateUrl call 
                    or write the markup
            2) {name}.component.html
        from main.ts
            1)import { {Name}Component } from './app/{name}.component';
            2)bootstrapApplication({Name}Component)
    Add in ../index.html
        <body>
             <{name}-{component}-></{name}-{component}>
        </body> 
*How to manually add new components (under Angular Frame Work)
    The idea is to make App a top level and use the new files from this level
    so instead of calling the components from imdex.html ,  to invoke these
    1) from app.component.html
        Add
        <body>
            <{name}-{component}-></{name}-{component}>
        ex. <app-header></app-header>
        </body>
    2)Add to app.component.ts the new components files by:
        -import component from core 
            ex. import { HeaderComponent } from './header.component'; 
        - add the import in decorator
            ex. imports: [HeaderComponent],
    3) as the imports and bootstrapApplication are inserted in the app.component.ts
        we dont need those lines in main.ts
        *How to automatically (using ng) generate new components
    #ng generate component {name} {path}
    #ng g c {name} {path} 
    ex. #ng g c user 
        by default the above command creates the files in ./src/app/user/
        files :
                CREATE src/app/user/user.component.html (20 bytes)
                CREATE src/app/user/user.component.spec.ts (601 bytes)
                CREATE src/app/user/user.component.ts (238 bytes)
                CREATE src/app/user/user.component.css (0 bytes)
- Dynamic content (lesson 20 and above):
    1)  Define a property inside the component's class:
            To make dynamic text rendering from a Jason file add a property  in the component .ts file as below
            to the class ,and access it accordingly from the component .html file.
    2)  Binding html template:
            2.1) String interpolation
                    double curly brackets inside a tag
                        {{ method in the clas with param.object}}
                        ex. <span>{{ selectedUser.name}}</span>
            2.2)Property Binding:
                    2.2.1)Inside the template wrapping in the .html file the property in square brackets []
                        ex. <img [src]="'assets/' + selectedUser.avatar"/>
                    2.2.2)Defining a getter whitin the class in the component .ts file
                        Declare a get method in the class 
                            to be binded in the HTML
                            ex. whitin user.component.ts 
                            get imagePath()
                                {
                                    return 'assets/users/' + this.selectedUser.avatar;
                                }
                             and within the .html
                                [src]="imagePath"
    
</Angular>

<vscode>
    Recommended extentions
        Angular Language Service (angular.io)
        Angular Essentials (John Papa)
</vscode>
*How to start the development server
    -binding localhost
    #npm start
        If you just installed angular , open a new Powershell
    -binding IP 
    #ng serve --host 0.0.0.0
    we can change the 'start' command in the scrpit contained in package.json

</install>

    -As of July 2024 Signals is a fearly new Angular feature, not wide adopted , therefore
    setting properties using "Input" decorators is the common way to accept components "Input".
    The class to import Signals is "input" and the one to work with decorators is "Input".
    ex. using decorators : 
        @Input({ required:true}) avatar!:string;  

</Notes>
<versioning history>
    7.10.2024 starts
    7.11.2024 Initial split version
</versioning history>
</Subject>